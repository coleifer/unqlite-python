from typing import Any, Iterator, Self, Union, Callable

# Open mode flags.
UNQLITE_OPEN_READONLY = 0x00000001
UNQLITE_OPEN_READWRITE = 0x00000002
UNQLITE_OPEN_CREATE = 0x00000004
UNQLITE_OPEN_EXCLUSIVE = 0x00000008
UNQLITE_OPEN_TEMP_DB = 0x00000010
UNQLITE_OPEN_NOMUTEX = 0x00000020
UNQLITE_OPEN_OMIT_JOURNALING = 0x00000040
UNQLITE_OPEN_IN_MEMORY = 0x00000080
UNQLITE_OPEN_MMAP = 0x00000100

# Cursor seek flags.
UNQLITE_CURSOR_MATCH_EXACT = 1
UNQLITE_CURSOR_MATCH_LE = 2
UNQLITE_CURSOR_MATCH_GE = 3

class UnQLiteError(Exception): ...

class Transaction:
    def __init__(self, unqlite: "UnQLite") -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...

class Cursor:
    unqlite: "UnQLite"
    consumed: bool

    def __init__(self, unqlite: "UnQLite") -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...
    def reset(self) -> Self: ...
    def seek(self, key, flags=UNQLITE_CURSOR_MATCH_EXACT): ...
    def first(self): ...
    def last(self): ...
    def next_entry(self): ...
    def previous_entry(self): ...
    def is_valid(self) -> bool: ...
    def __iter__(self) -> Self: ...
    def key(self) -> str: ...
    def value(self) -> Union[dict, list]: ...
    def delete(self): ...
    def __next__(self) -> (str, Union[dict, list]): ...
    def fetch_until(
        self, stop_key, include_stop_key=True
    ) -> Iterator[str, Union[list, dict]]: ...

class VM:
    unqlite: "UnQLite"
    need_reset: bool
    code: int
    encoded_code: bytes
    encoded_names: set
    def __init__(self, unqlite: "UnQLite", code) -> None: ...
    def compile(self): ...
    def execute(self): ...
    def reset(self): ...
    def __enter__(self) -> Self: ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...
    def create_value(self, value): ...
    def release_value(self, ptr): ...
    def create_array(self): ...
    def create_scalar(self): ...
    def set_value(self, name, value): ...
    def get_value(self, name): ...
    def __getitem__(self, name): ...
    def __setitem__(self, name, value): ...
    def set_values(self, data): ...

class Context:
    def set_context(self, context): ...
    def create_value(self, value): ...
    def release_value(self, ptr): ...
    def create_array(self): ...
    def create_scalar(self): ...
    def push_result(self, value): ...
    def python_to_unqlite_value(self, unqlite_value_ptr, python_value) -> Any: ...

class CollectionIterator:
    unqlite: "UnQLite"
    vm: VM
    done: bool
    collection: "Collection"
    def __init__(self, collection: "Collection") -> None: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> Union[dict, list]: ...

class Collection:
    unqlite: "UnQLite"
    name: str

    def __init__(self, unqlite: UnQLite, name: str) -> None: ...
    def _execute(self, script, **kwargs): ...
    def _simple_execute(self, script, **kwargs): ...
    def all(self) -> list[Union[dict, list]]: ...
    def filter(self, filter_fn) -> list[Union[dict, list]]: ...
    def create(self): ...
    def drop(self): ...
    def exists(self) -> bool: ...
    def last_record_id(self) -> Union[int, str]: ...
    def current_record_id(self) -> Union[int, str]: ...
    def reset_cursor(self): ...
    def creation_date(self): ...
    def set_schema(self, _schema=None, **kwargs): ...
    def get_schema(self) -> dict: ...
    def __len__(self) -> int: ...
    def delete(self, record_id): ...
    def fetch(self, record_id) -> Union[dict, list]: ...
    def store(self, record, return_id=True): ...
    def update(self, record_id, record): ...
    def fetch_current(self) -> Union[dict, list]: ...
    def __delitem__(self, record_id): ...
    def __getitem__(self, record_id) -> Union[dict, list]: ...
    def __setitem__(self, record_id, record): ...
    def error_log(self): ...
    def iterator(self) -> CollectionIterator: ...
    def __iter__(self):
        return iter(CollectionIterator(self))

class UnQLite:
    is_open: bool
    is_memory: bool
    filename: str
    encoded_filename: bytes
    flags: int
    open_database: int
    def __init__(
        self,
        filename: str,
        flags: int = UNQLITE_OPEN_CREATE,
        open_database=True,
        thread_safe=True,
    ) -> None: ...
    def open(self) -> bool: ...
    def close(self) -> bool: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...
    def disable_autocommit(self) -> bool: ...
    def store(self, key, value): ...
    def fetch(self, key) -> bytes: ...
    def delete(self, key): ...
    def append(self, key, value): ...
    def exists(self, key) -> bool: ...
    def __setitem__(self, key, value): ...
    def __getitem__(self, key) -> bytes: ...
    def __delitem__(self, key): ...
    def __contains__(self, key) -> bool: ...
    def begin(self) -> bool: ...
    def commit(self) -> bool: ...
    def rollback(self) -> bool: ...
    def transaction(self, func) -> Transaction: ...
    def commit_on_success(self) -> Callable: ...
    def cursor(self) -> Cursor: ...
    def vm(slef, code) -> VM: ...
    def collection(self, name) -> Collection: ...
    def update(self, values): ...
    def keys(self) -> Iterator: ...
    def values(self) -> Iterator: ...
    def items(self) -> Iterator[tuple]: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def flush(self) -> int: ...
    def random_string(self, nbytes) -> str: ...
    def random_int(self, nbits) -> int: ...
    def lib_version(self) -> str: ...
